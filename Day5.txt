//Q.1 Create a multi-level inheritance , instantiate the child class and observe constructor invocation.
//Also show,if needed how will u invoke parent class constructor from child class?

package primenumber;
class Parent 
{
     Parent(int num)
     {
    	 System.out.println("constructor is called");
     }
}
class child extends Parent
{
    child(int num)
    {
    	super(90);
    	System.out.println("the num: "+num);
    }
}
class child1 extends Parent
{
    	child1(int num1)
    	{
    		super(40);
    		System.out.println("the num: "+num1);
        }
}
public class ShapeDemo
{
   public static void main(String args[])
   {
	  child1 C1= new child1(40);
	   
   }
}

//2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler.
//How will u override "start()" method of parent class ?
package primenumber;

class  Vehicle 
{
   public void start()
   {
	  System.out.println("start in parent ");
   }
}
class Fourwheeler extends Vehicle
{
    public void start()
    {
    	System.out.println("start in child");
    }
}
public class Demo
{
    public static void main(String args[])	
    {
    	Fourwheeler M1= new Fourwheeler();
    	M1.start();
    	Vehicle V1= new Vehicle();
    	V1.start();
    	
    }
}

// Q.3 Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.
package primenumber;

class Parent 
{
    public Parent()
    {
    	System.out.println("default constructor");
    }
     void disp()
     {
    	 System.out.println("inside parent disp");
     }
}
class child extends Parent
{
	child (int num)
	{
		System.out.println("inside child constructor"+num);
	}
	
	void disp()
	{
		System.out.println("inside child method ");
	}
}	
	class child2 extends Parent
	{
		child2()
		{
			System.out.println("inside child2 constructor");
		}
		void disp(int num1, int num2)
		{
			System.out.println(num1+num2);
		}
	}
	public class Demo
	{
		public static void main(String[] args)
		{
			child2 c1= new child2();
			c1.disp(20,30);
		}
	}

//Q.4) Create a class "Top1" with "disp1()" method From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
//Now show how will u achieve dynamic polymorphism.
package primenumber;
class Top1
{
    void disp1()
    {
    	System.out.println("parent constructor");
    }
}
class Bottom1 extends Top1
{
    	void disp()
    	{
    		System.out.println("inside child class display");
    	}
}
class Bottom2 extends Bottom1
{
	  void disp()
	  {
		  System.out.println("inside child class2 display");
	  }
}
class Bottom3 extends Bottom2
{
   void disp()	
   {
	   System.out.println("inside child class 3 display");
   }
}

public class Demo
{
   public static void main(String[] args)
   {
	   Top1 t1= new Top1();
	   Bottom1 b1 = new Bottom1();
	   Bottom2 b2= new Bottom2();
	   Bottom3 b3 = new Bottom3();
	   
	   b1.disp();
	   b2.disp();
	   b3.disp();	   
	   
   }	
}

//5) create abstract class Shape. declare "draw()" function as abstract From this class define "Triangle","Polygon" and "Circle" .
//create an array of Shape having 3 elements.store child objects into this array & call their draw function.
package primenumber;
abstract class Shape
{
   abstract void draw();	
}
class Triangle extends Shape 
{
	void draw ()
	{
		System.out.println("Draw a triangle");
	}
}
class Polygon extends Triangle
{
    void draw()
    {
    	System.out.println("Draw a polygon");
    }
}
class Circle extends Polygon
{
   void draw()	
   {
	   System.out.println("Draw a Cricle");
   }
}

public class Demo
{ 
	public static void main(String[]args) 
	{
	  	Shape[]Shape= new Shape[3];
	  	Shape[0]= new Triangle();
	  	Shape[1]= new Polygon();
	  	Shape[2]= new Circle();
	  	
	  	for (int i=0;i<=Shape.length;i++)
	  	{
	  	    Shape[i].draw();
	  	}
	  	
	}	
}
//7) Define class "Parent1" with some data.Define interface "Parent2" with some methods.
//Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.
package primenumber;
class Parent1 
{
	int num;
   Parent1()
   {
	   System.out.println("parent constructor");
   }
   void disp(int num)
   {
	   System.out.println("inside display");
   }
}
interface Parent2 
{
    void disp1(int num);
    void disp2();
}
class Child extends Parent1 implements Parent2
{
	 public void disp1(int num)
	 {
		 System.out.println();
	 }
	public  void disp2()
	 {
		 System.out.println("function disp2");
	 }
}

public class Demo
{
   public static void main(String[] args)
   {
	   Child c1=new Child();   
	   c1.disp1(40);
	   c1.disp2();
	   Parent1 P1= new Parent1();
	   P1.disp(46);
   }	
}

//8) Define a class "base1" with only parameterized constructor.Derive a class "sub1" from "base1". This class should have following constructors
//a) Default b) one parameter c) two parameter .Now try to instantiate "sub1" , using any of the above mentioned constructors.

package primenumber;
class base1
{
    base1(int num)
    {
    	System.out.println("base constructor");
    }
}
class sub1 extends base1
{
	sub1()
	{
		super(45);
		System.out.println("default");
	}
	sub1(int num)
	{
		super(20);
		System.out.println("the value of number is:"+num);
	}
	 sub1(int num1,int num2)
	 {
		 super(10);
		 System.out.println("The value of number of 2nd one is "+num1+" "+num2);
	 } 
}
public class Demo
{
     public static void main(String[] args) 
  {
	sub1 S1= new sub1(30);
	sub1 s2= new sub1(15);
	sub1 s3= new sub1(10,20);
	sub1 s4=new sub1();

    	 
    	 
  }	
}



